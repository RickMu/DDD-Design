// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProductSellContext))]
    [Migration("20190409115844_ProductSellAggregateCreation")]
    partial class ProductSellAggregateCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Customer.SellSignup", b =>
                {
                    b.Property<string>("ProductSellId");

                    b.Property<string>("SignupEmail")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProductSellId");

                    b.ToTable("SellSignups");
                });

            modelBuilder.Entity("Domain.ProductAttributes.Factory.AttributeOption", b =>
                {
                    b.Property<string>("ProductId");

                    b.Property<string>("Name");

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("ProductId", "Name", "Value");

                    b.ToTable("AttributeOptions");
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttribute", b =>
                {
                    b.Property<string>("ProductId");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("ProductId", "Name");

                    b.ToTable("ProductAttributes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductAttribute");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<string>("Identity")
                        .HasColumnName("ProductId");

                    b.Property<decimal>("BasePrice")
                        .HasColumnName("BasePrice")
                        .HasColumnType("decimal(8,4)");

                    b.HasKey("Identity");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.ProductSells.ProductCombination", b =>
                {
                    b.Property<string>("ProductSellId");

                    b.Property<string>("Identity")
                        .HasColumnName("ProductCombinationId");

                    b.Property<long>("SignupCount")
                        .HasColumnName("SignupCount");

                    b.HasKey("ProductSellId", "Identity");

                    b.ToTable("ProductCombinations");
                });

            modelBuilder.Entity("Domain.ProductSells.ProductSell", b =>
                {
                    b.Property<string>("Identity")
                        .HasColumnName("ProductSellId");

                    b.Property<bool>("IsReleasable");

                    b.Property<bool>("IsReleased");

                    b.Property<string>("ProductIdentity");

                    b.HasKey("Identity");

                    b.HasIndex("ProductIdentity");

                    b.ToTable("ProductSell");
                });

            modelBuilder.Entity("Domain.ProductSells.SelectedAttribute", b =>
                {
                    b.Property<string>("ProductSellId");

                    b.Property<string>("ProductCombinationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("AttributeName");

                    b.Property<string>("SelectedOption")
                        .IsRequired()
                        .HasColumnName("SelectedOption");

                    b.HasKey("ProductSellId", "ProductCombinationId");

                    b.ToTable("SelectedAttributes");
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttributeWithContinousValue", b =>
                {
                    b.HasBaseType("Domain.ProductAttributes.ProductAttribute");


                    b.ToTable("ProductAttributeWithContinousValue");

                    b.HasDiscriminator().HasValue("ProductAttributeWithContinousValue");
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttributeWithDiscreteValue", b =>
                {
                    b.HasBaseType("Domain.ProductAttributes.ProductAttribute");


                    b.ToTable("ProductAttributeWithDiscreteValue");

                    b.HasDiscriminator().HasValue("ProductAttributeWithDiscreteValue");
                });

            modelBuilder.Entity("Domain.Customer.SellSignup", b =>
                {
                    b.HasOne("Domain.ProductSells.ProductSell")
                        .WithMany("Signups")
                        .HasForeignKey("ProductSellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.ProductAttributes.Factory.AttributeOption", b =>
                {
                    b.HasOne("Domain.ProductAttributes.ProductAttribute")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("ProductId", "Name")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Products.Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.ProductSells.ProductCombination", b =>
                {
                    b.HasOne("Domain.ProductSells.ProductSell")
                        .WithMany("Combinations")
                        .HasForeignKey("ProductSellId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.ProductSells.ProductPrice", "ProductPrice", b1 =>
                        {
                            b1.Property<string>("ProductCombinationProductSellId");

                            b1.Property<string>("ProductCombinationIdentity");

                            b1.Property<decimal>("Discount")
                                .HasColumnType("decimal(8,4)");

                            b1.Property<decimal>("LowestPrice")
                                .HasColumnType("decimal(8,4)");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(8,4)");

                            b1.ToTable("ProductCombinations");

                            b1.HasOne("Domain.ProductSells.ProductCombination")
                                .WithOne("ProductPrice")
                                .HasForeignKey("Domain.ProductSells.ProductPrice", "ProductCombinationProductSellId", "ProductCombinationIdentity")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.ProductSells.ProductSell", b =>
                {
                    b.HasOne("Domain.Products.Product")
                        .WithMany("ProductSells")
                        .HasForeignKey("ProductIdentity");
                });

            modelBuilder.Entity("Domain.ProductSells.SelectedAttribute", b =>
                {
                    b.HasOne("Domain.ProductSells.ProductCombination")
                        .WithMany("Combination")
                        .HasForeignKey("ProductSellId", "ProductCombinationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
