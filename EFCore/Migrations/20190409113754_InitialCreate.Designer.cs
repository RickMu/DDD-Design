// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProductSellContext))]
    [Migration("20190409113754_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.ProductAttributes.Factory.AttributeOption", b =>
                {
                    b.Property<string>("ProductId");

                    b.Property<string>("Name");

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("ProductId", "Name", "Value");

                    b.ToTable("AttributeOptions");
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttribute", b =>
                {
                    b.Property<string>("ProductId");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("ProductId", "Name");

                    b.ToTable("ProductAttributes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductAttribute");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<string>("Identity")
                        .HasColumnName("ProductId");

                    b.Property<decimal>("BasePrice")
                        .HasColumnName("BasePrice")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("Identity");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttributeWithContinousValue", b =>
                {
                    b.HasBaseType("Domain.ProductAttributes.ProductAttribute");


                    b.ToTable("ProductAttributeWithContinousValue");

                    b.HasDiscriminator().HasValue("ProductAttributeWithContinousValue");
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttributeWithDiscreteValue", b =>
                {
                    b.HasBaseType("Domain.ProductAttributes.ProductAttribute");


                    b.ToTable("ProductAttributeWithDiscreteValue");

                    b.HasDiscriminator().HasValue("ProductAttributeWithDiscreteValue");
                });

            modelBuilder.Entity("Domain.ProductAttributes.Factory.AttributeOption", b =>
                {
                    b.HasOne("Domain.ProductAttributes.ProductAttribute")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("ProductId", "Name")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ProductAttributes.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Products.Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
